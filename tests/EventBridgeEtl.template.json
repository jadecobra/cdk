{
  "Resources": {
    "LandingBucket23FE90FB": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "LandingBucketNotificationsEF1634C6": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "LandingBucket23FE90FB"
        },
        "NotificationConfiguration": {
          "QueueConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "QueueArn": {
                "Fn::GetAtt": [
                  "newObjectInLandingBucketEventQueue67CBE2F2",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "newObjectInLandingBucketEventQueuePolicy6B7CC541",
        "newObjectInLandingBucketEventQueue67CBE2F2"
      ]
    },
    "TransformedDataErrorTopic9205B960": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "ErrorTopic"
      }
    },
    "TransformedData0F179200": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "TransformedDataDynamoDBUserErrors024AE8883": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 6,
        "AlarmActions": [
          {
            "Ref": "TransformedDataErrorTopic9205B960"
          }
        ],
        "DatapointsToAlarm": 1,
        "MetricName": "UserErrors",
        "Namespace": "AWS/DynamoDB",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "TransformedDataDynamoDBTableReadsWritesThrottledFA5D4E5E": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 6,
        "AlarmActions": [
          {
            "Ref": "TransformedDataErrorTopic9205B960"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Expression": "m1 + m2",
            "Id": "expr_1",
            "Label": "DynamoDB Throttles"
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "TableName",
                    "Value": {
                      "Ref": "TransformedData0F179200"
                    }
                  }
                ],
                "MetricName": "ReadThrottleEvents",
                "Namespace": "AWS/DynamoDB"
              },
              "Period": 300,
              "Stat": "Sum"
            },
            "ReturnData": false
          },
          {
            "Id": "m2",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "TableName",
                    "Value": {
                      "Ref": "TransformedData0F179200"
                    }
                  }
                ],
                "MetricName": "WriteThrottleEvents",
                "Namespace": "AWS/DynamoDB"
              },
              "Period": 300,
              "Stat": "Sum"
            },
            "ReturnData": false
          }
        ],
        "Threshold": 1,
        "TreatMissingData": "notBreaching"
      }
    },
    "TransformedDataCloudWatchDashBoardBB415568": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardBody": {
          "Fn::Join": [
            "",
            [
              "{\"widgets\":[{\"type\":\"metric\",\"width\":8,\"height\":6,\"x\":0,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"title\":\"DynamoDB Latency\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"stacked\":true,\"metrics\":[[\"AWS/DynamoDB\",\"SuccessfulRequestLatency\",\"Operation\",\"GetItem\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"],[\"AWS/DynamoDB\",\"SuccessfulRequestLatency\",\"Operation\",\"UpdateItem\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"],[\"AWS/DynamoDB\",\"SuccessfulRequestLatency\",\"Operation\",\"PutItem\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"],[\"AWS/DynamoDB\",\"SuccessfulRequestLatency\",\"Operation\",\"DeleteItem\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"],[\"AWS/DynamoDB\",\"SuccessfulRequestLatency\",\"Operation\",\"Query\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":8,\"height\":6,\"x\":0,\"y\":6,\"properties\":{\"view\":\"timeSeries\",\"title\":\"DynamoDB Consumed Read/Write Units\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"stacked\":false,\"metrics\":[[\"AWS/DynamoDB\",\"ConsumedReadCapacityUnits\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"],[\"AWS/DynamoDB\",\"ConsumedWriteCapacityUnits\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\"]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":8,\"height\":6,\"x\":0,\"y\":12,\"properties\":{\"view\":\"timeSeries\",\"title\":\"DynamoDB Throttles\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"stacked\":true,\"metrics\":[[\"AWS/DynamoDB\",\"ReadThrottleEvents\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\",{\"stat\":\"Sum\"}],[\"AWS/DynamoDB\",\"WriteThrottleEvents\",\"TableName\",\"",
              {
                "Ref": "TransformedData0F179200"
              },
              "\",{\"stat\":\"Sum\"}]],\"yAxis\":{}}}]}"
            ]
          ]
        }
      }
    },
    "newObjectInLandingBucketEventQueue67CBE2F2": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "VisibilityTimeout": 300
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "newObjectInLandingBucketEventQueuePolicy6B7CC541": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl"
              ],
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "LandingBucket23FE90FB",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Resource": {
                "Fn::GetAtt": [
                  "newObjectInLandingBucketEventQueue67CBE2F2",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Queues": [
          {
            "Ref": "newObjectInLandingBucketEventQueue67CBE2F2"
          }
        ]
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n    response_status = \"SUCCESS\"\n    error_message = \"\"\n    try:\n        props = event[\"ResourceProperties\"]\n        bucket = props[\"BucketName\"]\n        notification_configuration = props[\"NotificationConfiguration\"]\n        request_type = event[\"RequestType\"]\n        managed = props.get('Managed', 'true').lower() == 'true'\n        stack_id = event['StackId']\n\n        if managed:\n          config = handle_managed(request_type, notification_configuration)\n        else:\n          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n        put_bucket_notification_configuration(bucket, config)\n    except Exception as e:\n        logging.exception(\"Failed to put bucket notification configuration\")\n        response_status = \"FAILED\"\n        error_message = f\"Error: {str(e)}. \"\n    finally:\n        submit_response(event, context, response_status, error_message)\n\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n\n  # find external notifications\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  # if delete, that's all we need\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  # otherwise, merge external with incoming config and augment with id\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n  return notifications\n\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    # if the notification was created by us, we know what id to expect\n    # so we can filter by it.\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  return external_notifications\n\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n    response_body = json.dumps(\n        {\n            \"Status\": response_status,\n            \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n            \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n            \"StackId\": event[\"StackId\"],\n            \"RequestId\": event[\"RequestId\"],\n            \"LogicalResourceId\": event[\"LogicalResourceId\"],\n            \"NoEcho\": False,\n        }\n    ).encode(\"utf-8\")\n    headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n    try:\n        req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n        with urllib.request.urlopen(req) as response:\n            print(response.read().decode(\"utf-8\"))\n        print(\"Status code: \" + response.reason)\n    except Exception as e:\n        print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ]
    },
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc"
          }
        ]
      }
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        }
      }
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ]
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3"
        }
      }
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ]
    },
    "VpcPublicSubnet2EIP3C605A87": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2NATGateway9182C01D": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PrivateSubnet1"
          }
        ]
      }
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PrivateSubnet1"
          }
        ]
      }
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A"
        }
      }
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        }
      }
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.192.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PrivateSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc/PrivateSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
        }
      }
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D"
        }
      }
    },
    "VpcIGWD7BA715C": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "EventBridgeEtl/Vpc"
          }
        ]
      }
    },
    "VpcVPCGWBF912B6E": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      }
    },
    "Ec2ClusterEE43E89D": {
      "Type": "AWS::ECS::Cluster"
    },
    "FargateTaskDefinitionTaskRoleE3C2BCAA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "FargateTaskDefinitionTaskRoleDefaultPolicy798E9D9D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LandingBucket23FE90FB",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "LandingBucket23FE90FB",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "FargateTaskDefinitionTaskRoleDefaultPolicy798E9D9D",
        "Roles": [
          {
            "Ref": "FargateTaskDefinitionTaskRoleE3C2BCAA"
          }
        ]
      }
    },
    "FargateTaskDefinition8E3B365E": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "S3_BUCKET_NAME",
                "Value": {
                  "Ref": "LandingBucket23FE90FB"
                }
              },
              {
                "Name": "S3_OBJECT_KEY",
                "Value": ""
              }
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ".dkr.ecr.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/aws-cdk/assets:a0e8a053d353200c21f968c3dfb181ca2e00fa40d637956c45dd31e05eb6cdb3"
                ]
              ]
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "FargateTaskDefinitionAppContainerLogGroup20407D7C"
                },
                "awslogs-stream-prefix": "TheEventBridgeETL",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Name": "AppContainer"
          }
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "FargateTaskDefinitionExecutionRoleE69A8E33",
            "Arn"
          ]
        },
        "Family": "EventBridgeEtlFargateTaskDefinition9FC3A97C",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "FargateTaskDefinitionTaskRoleE3C2BCAA",
            "Arn"
          ]
        }
      }
    },
    "FargateTaskDefinitionAppContainerLogGroup20407D7C": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "FargateTaskDefinitionExecutionRoleE69A8E33": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "FargateTaskDefinitionExecutionRoleDefaultPolicy1632DA52": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":repository/aws-cdk/assets"
                  ]
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "FargateTaskDefinitionAppContainerLogGroup20407D7C",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "FargateTaskDefinitionExecutionRoleDefaultPolicy1632DA52",
        "Roles": [
          {
            "Ref": "FargateTaskDefinitionExecutionRoleE69A8E33"
          }
        ]
      }
    },
    "extractorServiceRole12C0E5F0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "extractorServiceRoleDefaultPolicy778C96DE": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Effect": "Allow",
              "Resource": {
                "Ref": "FargateTaskDefinition8E3B365E"
              }
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FargateTaskDefinitionExecutionRoleE69A8E33",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "FargateTaskDefinitionTaskRoleE3C2BCAA",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "newObjectInLandingBucketEventQueue67CBE2F2",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "extractorServiceRoleDefaultPolicy778C96DE",
        "Roles": [
          {
            "Ref": "extractorServiceRole12C0E5F0"
          }
        ]
      }
    },
    "extractor28E8DDEE": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5aS3BucketFC966DDD"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5aS3VersionKeyD608ABCA"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5aS3VersionKeyD608ABCA"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "extractorServiceRole12C0E5F0",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "CLUSTER_NAME": {
              "Ref": "Ec2ClusterEE43E89D"
            },
            "TASK_DEFINITION": {
              "Ref": "FargateTaskDefinition8E3B365E"
            },
            "SUBNETS": {
              "Fn::Join": [
                "",
                [
                  "[\"",
                  {
                    "Ref": "VpcPrivateSubnet1Subnet536B997A"
                  },
                  "\", \"",
                  {
                    "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
                  },
                  "\"]"
                ]
              ]
            },
            "CONTAINER_NAME": "AppContainer"
          }
        },
        "Handler": "extractor.handler",
        "ReservedConcurrentExecutions": 2,
        "Runtime": "nodejs12.x",
        "Timeout": 3
      },
      "DependsOn": [
        "extractorServiceRoleDefaultPolicy778C96DE",
        "extractorServiceRole12C0E5F0"
      ]
    },
    "extractorSqsEventSourceEventBridgeEtlnewObjectInLandingBucketEventQueue474140A751F21849": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "FunctionName": {
          "Ref": "extractor28E8DDEE"
        },
        "EventSourceArn": {
          "Fn::GetAtt": [
            "newObjectInLandingBucketEventQueue67CBE2F2",
            "Arn"
          ]
        }
      }
    },
    "transformerServiceRole0163859E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "transformerServiceRoleDefaultPolicy472DB935": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "transformerServiceRoleDefaultPolicy472DB935",
        "Roles": [
          {
            "Ref": "transformerServiceRole0163859E"
          }
        ]
      }
    },
    "transformer45242959": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParametersda0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6dS3Bucket6F436E85"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersda0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6dS3VersionKeyABBAFDA5"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersda0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6dS3VersionKeyABBAFDA5"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "transformerServiceRole0163859E",
            "Arn"
          ]
        },
        "Handler": "transformer.handler",
        "ReservedConcurrentExecutions": 2,
        "Runtime": "nodejs12.x",
        "Timeout": 3
      },
      "DependsOn": [
        "transformerServiceRoleDefaultPolicy472DB935",
        "transformerServiceRole0163859E"
      ]
    },
    "transformerRuleA9C7F670": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Data extracted from S3, Needs transformation",
        "EventPattern": {
          "detail": {
            "status": [
              "extracted"
            ]
          },
          "detail-type": [
            "s3RecordExtraction"
          ],
          "source": [
            "cdkpatterns.the-eventbridge-etl"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "transformer45242959",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      }
    },
    "transformerRuleAllowEventRuleEventBridgeEtltransformerBC87AE2AEE80C8DF": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "transformer45242959",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "transformerRuleA9C7F670",
            "Arn"
          ]
        }
      }
    },
    "loaderServiceRole5A433B5E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "loaderServiceRoleDefaultPolicyEEB1BF44": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TransformedData0F179200",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "loaderServiceRoleDefaultPolicyEEB1BF44",
        "Roles": [
          {
            "Ref": "loaderServiceRole5A433B5E"
          }
        ]
      }
    },
    "loader7ADF6D64": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4S3Bucket349BFD92"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4S3VersionKeyEDA3A683"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4S3VersionKeyEDA3A683"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "loaderServiceRole5A433B5E",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "TransformedData0F179200"
            }
          }
        },
        "Handler": "loader.handler",
        "ReservedConcurrentExecutions": 2,
        "Runtime": "nodejs12.x",
        "Timeout": 3
      },
      "DependsOn": [
        "loaderServiceRoleDefaultPolicyEEB1BF44",
        "loaderServiceRole5A433B5E"
      ]
    },
    "loaderRule16B863C1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Load Transformed Data to DynamoDB",
        "EventPattern": {
          "detail": {
            "status": [
              "transformed"
            ]
          },
          "detail-type": [
            "transform"
          ],
          "source": [
            "cdkpatterns.the-eventbridge-etl"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "loader7ADF6D64",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      }
    },
    "loaderRuleAllowEventRuleEventBridgeEtlloader8D35F91FFF86C727": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "loader7ADF6D64",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "loaderRule16B863C1",
            "Arn"
          ]
        }
      }
    },
    "observerServiceRole2C8CB539": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "observer83FEAD49": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6ccS3BucketCC41D51F"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6ccS3VersionKey3DE682D2"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6ccS3VersionKey3DE682D2"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "observerServiceRole2C8CB539",
            "Arn"
          ]
        },
        "Handler": "observer.handler",
        "ReservedConcurrentExecutions": 2,
        "Runtime": "nodejs12.x",
        "Timeout": 3
      },
      "DependsOn": [
        "observerServiceRole2C8CB539"
      ]
    },
    "observerRule7DADF317": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "observe and log all events",
        "EventPattern": {
          "source": [
            "cdkpatterns.the-eventbridge-etl"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "observer83FEAD49",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      }
    },
    "observerRuleAllowEventRuleEventBridgeEtlobserverC2A380EF2E71D59D": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "observer83FEAD49",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "observerRule7DADF317",
            "Arn"
          ]
        }
      }
    }
  },
  "Parameters": {
    "AssetParameters7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5aS3BucketFC966DDD": {
      "Type": "String",
      "Description": "S3 bucket for asset \"7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5a\""
    },
    "AssetParameters7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5aS3VersionKeyD608ABCA": {
      "Type": "String",
      "Description": "S3 key for asset version \"7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5a\""
    },
    "AssetParameters7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5aArtifactHash0151046C": {
      "Type": "String",
      "Description": "Artifact hash for asset \"7d6718cecd4933ee680e31483c1de1db4308603c1013287a397e7baba811dd5a\""
    },
    "AssetParametersda0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6dS3Bucket6F436E85": {
      "Type": "String",
      "Description": "S3 bucket for asset \"da0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6d\""
    },
    "AssetParametersda0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6dS3VersionKeyABBAFDA5": {
      "Type": "String",
      "Description": "S3 key for asset version \"da0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6d\""
    },
    "AssetParametersda0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6dArtifactHashF74C56A1": {
      "Type": "String",
      "Description": "Artifact hash for asset \"da0b25bff29f2bc7e9527f77cabf47db4317c597764d84fd5c573156d20ced6d\""
    },
    "AssetParameters5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4S3Bucket349BFD92": {
      "Type": "String",
      "Description": "S3 bucket for asset \"5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4\""
    },
    "AssetParameters5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4S3VersionKeyEDA3A683": {
      "Type": "String",
      "Description": "S3 key for asset version \"5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4\""
    },
    "AssetParameters5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4ArtifactHash3B932F8C": {
      "Type": "String",
      "Description": "Artifact hash for asset \"5481099d81c7f61c11c6ceae7372966cbba68abad8d9b66f9323a98b709639e4\""
    },
    "AssetParameters67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6ccS3BucketCC41D51F": {
      "Type": "String",
      "Description": "S3 bucket for asset \"67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6cc\""
    },
    "AssetParameters67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6ccS3VersionKey3DE682D2": {
      "Type": "String",
      "Description": "S3 key for asset version \"67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6cc\""
    },
    "AssetParameters67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6ccArtifactHashD8F93B17": {
      "Type": "String",
      "Description": "Artifact hash for asset \"67bfcaa568283347b1242d63a1f0eaa516e258ab0a57b374cb3fc59217a1b6cc\""
    }
  }
}